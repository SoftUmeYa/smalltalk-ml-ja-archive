'From Squeakland 3.8-05 of 7 September 2005 [latest update: #544] on 14 September 2006 at 11:28:33 am'!!ODBBTreeIterator methodsFor: '*omnibaseJ-override-public' stamp: 'mu 9/14/2006 11:21'!at: aString ifAbsent: aBlock 	| key association str |	key := ByteArray new: keyLength.	str := aString isWideString ifTrue: [aString asUnicodeByteArray] ifFalse: [aString].	key replaceFrom: 1 to: (str size min: keyLength) with: str startingAt: 1.	association := self goToAndGetCurrentAt: key.	self clearSearchCache.	association isNil ifTrue: [^aBlock value].	^association value odbLongAt: 1! !!ODBBTreeIterator methodsFor: '*omnibaseJ-override-public' stamp: 'mu 9/14/2006 11:21'!at: aString put: anInteger 	| key value str |	key := ByteArray new: keyLength.	str := aString isWideString ifTrue: [aString asUnicodeByteArray] ifFalse: [aString].	key 		replaceFrom: 1		to: (str size min: keyLength)		with: str		startingAt: 1.	value := ByteArray new: 4.	value odbLongAt: 1 put: anInteger.	self		goTo: key put: value;		clearSearchCache.	^anInteger! !!ODBStream methodsFor: '*omnibaseJ-override' stamp: 'mu 9/14/2006 11:13'!getString	| str |	str := self getByteString.	str ifEmpty: [^str].	str first asciiValue = 0 		ifTrue: [str := String fromUnicodeByteArray: (str copyFrom: 2 to: str size)]. "Remove mark for WideString"	^str! !!ODBStream methodsFor: '*omnibaseJ-override' stamp: 'mu 9/14/2006 11:14'!putString: aString 	aString isWideString		ifTrue: [self putWideString: aString]		ifFalse: [self putByteString: aString]! !!ODBStream methodsFor: '*omnibaseJ' stamp: 'mu 9/14/2006 11:05'!getByteString	| size bytes |	^(size := self getPositiveInteger) = 0		ifTrue: [String new]		ifFalse: [			bytes := ByteArray new: size.			self getBytesFor: bytes len: size.			bytes asString ]! !!ODBStream methodsFor: '*omnibaseJ' stamp: 'mu 9/14/2006 11:02'!putByteString: aString	self putPositiveInteger: aString basicSize.	aString basicSize > 0 ifTrue: [ self putBytesFrom: aString asByteArray len: aString basicSize ]! !!ODBStream methodsFor: '*omnibaseJ' stamp: 'mu 9/13/2006 16:58'!putWideString: aString	| bytes |	bytes := (Character value: 0) asString, aString asUnicodeByteArray. "Add mark for WideString"	self putPositiveInteger: bytes size.	aString basicSize > 0 ifTrue: [ 		self putBytesFrom: bytes len: bytes size  ]! !!String methodsFor: '*omnibaseJ' stamp: 'mu 9/13/2006 16:55'!asUnicodeByteArray	| warr str |	warr := self asUnicodeWordArray.	str := WriteStream on: (ByteArray new: warr byteSize).	warr do: [:each | str nextWordPut: each].	^str contents  ! !!String methodsFor: '*omnibaseJ' stamp: 'mu 9/13/2006 13:00'!asUnicodeWordArray	| arr |	arr := WordArray new: self size.	1		to: arr size		do: [:idx | arr at: idx put: (self at: idx) asUnicode].	^ arr! !!String class methodsFor: '*omnibaseJ-instance creation' stamp: 'mu 9/13/2006 16:57'!fromUnicodeByteArray: byteArray 	| arr str warr |	arr := byteArray.	str := arr readStream.	warr := WordArray new: arr size // 2.	1		to: warr size		do: [:idx | warr at: idx put: str nextWord].	^ self fromUnicodeWordArray: warr! !!String class methodsFor: '*omnibaseJ-instance creation' stamp: 'mu 9/13/2006 16:57'!fromUnicodeWordArray: wordArray	| inst |	inst := self new: wordArray size.	1 to: wordArray size do: [:i | inst at: i put: (Unicode value: (wordArray at: i))].	^inst! !!WideString methodsFor: '*omnibaseJ' stamp: 'mu 9/13/2006 13:02'!odbBasicSerialize: serializer 	| len stream |	len := self size.	(stream := serializer stream)		putByte: 36;		putPositiveInteger: len.	1 to: len do: [:i | stream putWord: (self at: i) asUnicode]! !!String reorganize!('accessing' byteAt: byteAt:put: byteSize do:toFieldNumber: endsWithDigit findAnySubStr:startingAt: findBetweenSubStrs: findCloseParenthesisFor: findDelimiters:startingAt: findLastOccuranceOfString:startingAt: findString: findString:startingAt: findString:startingAt:caseSensitive: findTokens: findTokens:includes: findTokens:keep: findWordStart:startingAt: includesSubString: includesSubstring:caseSensitive: indexOf: indexOf:startingAt: indexOf:startingAt:ifAbsent: indexOfAnyOf: indexOfAnyOf:ifAbsent: indexOfAnyOf:startingAt: indexOfAnyOf:startingAt:ifAbsent: indexOfSubCollection: indexOfSubCollection:startingAt:ifAbsent: lastIndexOfPKSignature: leadingCharRunLengthAt: lineCorrespondingToIndex: lineCount lineNumber: linesDo: skipAnySubStr:startingAt: skipDelimiters:startingAt: startsWithDigit tabDelimitedFieldsDo:)('comparing' < <= = > >= alike: beginsWith: caseInsensitiveLessOrEqual: caseSensitiveLessOrEqual: charactersExactlyMatching: compare: compare:caseSensitive: compare:with:collated: crc16 endsWith: endsWithAnyOf: hash hashMappedBy: howManyMatch: match: sameAs: startingAt:match:startingAt:)('copying' copyReplaceTokens:with: deepCopy padded:to:with:)('converting' adaptToCollection:andSend: adaptToNumber:andSend: adaptToPoint:andSend: adaptToString:andSend: asByteArray asByteString asCharacter asDate asDateAndTime asDefaultDecodedString asDisplayText asDuration asFileName asFourCode asHex asHtml asIRCLowercase asIdentifier: asInteger asLegalSelector asLowercase asNumber asOctetString asPacked asParagraph asSignedInteger asSmalltalkComment asSqueakPathName asString asStringOrText asSymbol asText asTime asTimeStamp asUnHtml asUnsignedInteger asUppercase asUrl asUrlRelativeTo: asVmPathName askIfAddStyle:req: asWideString capitalized compressWithTable: contractTo: convertFromEncoding: convertFromSuperSwikiServerString convertFromWithConverter: convertToEncoding: convertToSuperSwikiServerString convertToSystemString convertToWithConverter: correctAgainst: correctAgainst:continuedFrom: correctAgainstDictionary:continuedFrom: encodeForHTTP encodeForHTTPWithTextEncoding: encodeForHTTPWithTextEncoding:conditionBlock: findSelector initialIntegerOrNil keywords numericSuffix onlyLetters openAsMorph romanNumber sansPeriodSuffix splitInteger stemAndNumericSuffix subStrings subStrings: substrings surroundedBySingleQuotes translateFrom:to:table: translateToLowercase translateToUppercase translateWith: truncateTo: truncateWithElipsisTo: unescapePercents unparenthetically unzipped withBlanksCondensed withBlanksTrimmed withFirstCharacterDownshifted withNoLineLongerThan: withSeparatorsCompacted withoutLeadingDigits withoutTrailingBlanks withoutTrailingDigits)('displaying' displayAt: displayOn: displayOn:at: displayOn:at:textColor: displayProgressAt:from:to:during:)('printing' basicType encodeDoublingQuoteOn: isLiteral printOn: storeOn: stringRepresentation)('private' correctAgainstEnumerator:continuedFrom: evaluateExpression:parameters: getEnclosedExpressionFrom: replaceFrom:to:with:startingAt: stringhash)('system primitives' endsWithAColon findSubstring:in:startingAt:matchTable: numArgs)('Celeste' withCRs)('internet' decodeMimeHeader decodeQuotedPrintable isoToSqueak isoToUtf8 macToSqueak squeakToIso squeakToMac utf8ToIso withInternetLineEndings withSqueakLineEndings withoutQuoting)('testing' hasContentsInExplorer includesUnifiedCharacter isAllDigits isAllSeparators isAsciiString isByteString isOctetString isString isWideString lastSpacePosition)('paragraph support' indentationIfBlank:)('arithmetic' * + - / // \\)('filter streaming' byteEncode: putOn:)('encoding' getInteger32: putInteger32:at: writeLeadingCharRunsOn:)('user interface' asExplorerString openInWorkspaceWithTitle:)('Camp Smalltalk' sunitAsSymbol sunitMatch: sunitSubStrings)('*packageinfo-base' escapeEntities)('translating' translated translatedIfCorresponds translatedTo:)('formatting' format:)('*morphic-Postscript Canvases' asPostscript)('*versionnumber' asVersion)('*Morphic' asMorph asStringMorph newTileMorphRepresentative)('*network-HTML' replaceHtmlCharRefs)('*FSM-events' eventType)('*connectors-comparing' beginsWith2:)('*connectors-converting' splitOnCapBoundaries)('*monticello' extractNumber)('*KomHttpServer' asHttpResponseTo: asIpByteArray isPositiveInteger)('*seaside2' asCapitalizedPhrase asMIMEDocument prettyPrintHtmlOn:indentLevel: printHtmlOn: renderOn:indentLevel:)('*ShoreComponents' asXHtml)('*omnibaseJ' asUnicodeByteArray asUnicodeWordArray)('*omnibase' asBtreeKeyOfSize: odbBasicSerialize: trimBlanks)('*seasideJ' convertFromHtmlInput convertToHtmlOutput)('*seasideJ-override' unescapePercentsWithTextEncoding:)('*sixx-printing' sixxContentOn:indent:context:)('*sixx-private' sixxType)!!ODBStream reorganize!('public' atEnd flush getBoolean getBytesFor: getChar getInteger getLong getPositiveInteger getWord putBoolean: putBytesFrom: putChar: putInteger: putLong: putPositiveInteger: putWord: setToEnd)('*omnibaseJ-override' getString putString:)('*omnibaseJ' getByteString putByteString: putWideString:)!!ODBBTreeIterator reorganize!('*omnibaseJ-override-public' at:ifAbsent: at:put:)('public' clearSearchCache fixTemps getCurrent getFirst getLast getSizeAt:oldHolders: getSizeHolder goToAndGetCurrentAt: goTo: goTo:put: isKey:at:lessThan: isLocked lockCurrentValue:with: put: searchCurrentKeyFrom: unlockCurrentWith: updateSizeAt:oldHolders:deltaSize: value:value:)('private' basicPut: clearSearchPath insertValue:lockID: searchNextAssociation searchPreviousAssociation updateCurrentKey)('private/initialization' created descriptionString initialize opened pageClass)('public/create/open/close' createOn: openOn:)('public/unclassified' critical: isKey:lessOrEqualTo:)('public/iterator interface' getNext getPrevious)('private/searching' isCurrentKeySet loadCurrentKey)('public/accessing' keyLength keyLength: valueLength: version version:)('private/page stack' lastPage loadPageAt: removeLastPage)('private/locking' lockTree unlockTree)('public/size holder' putSizeHolder:)!