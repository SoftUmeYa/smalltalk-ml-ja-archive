Error: Error: UndefinedObjectのインスタンスは添え字アクセス可能ではありません。22 March 2010 11:08:52 pmVM: Mac OS - a SmalltalkImageImage: Squeak3.9 [latest update: #7067]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir /Users/itoh/Research/squeak/defart4Trusted Dir /foobar/tooBar/forSqueak/bogusUntrusted Dir /Users/itoh/Library/Preferences/Squeak/Internet/My SqueakUndefinedObject(Object)>>error:	Receiver: nil	Arguments and temporary variables: 		aString: 	'Error: UndefinedObjectのインスタンスは添え字アクセス可能ではありません。'	Receiver's instance variables: nil[] in WorldState>>displayWorldSafely: {[:err :rcvr |  errCtx := thisContext.  [errCtx := errCtx sender.  [errCtx no...]}	Arguments and temporary variables: 		aWorld: 	a PasteUpMorph(1308) [world]		err: 	'Error: UndefinedObjectのインスタンスは添え字アクセス可能ではありません。'		rcvr: 	nil		errCtx: 	TextMorphForEditView(TextMorph)>>drawOn:		errMorph: 	a TextMorphForEditView(206)BlockContext>>valueWithPossibleArgs:	Receiver: [] in WorldState>>displayWorldSafely: {[:err :rcvr |  errCtx := thisContext.  [errCtx := e...etc...	Arguments and temporary variables: 		anArray: 	#('Error: UndefinedObjectのインスタンスは添え字アクセス可能ではありません。' nil)	Receiver's instance variables: 		sender: 	BlockContext>>valueWithPossibleArgs:		pc: 	121		stackp: 	0		nargs: 	2		startpc: 	74		home: 	WorldState>>displayWorldSafely:[] in BlockContext>>ifError: {[:ex | errorHandlerBlock valueWithPossibleArgs: {ex description. ex receiver}]}	Arguments and temporary variables: 		errorHandlerBlock: 	[] in WorldState>>displayWorldSafely: {[:err :rcvr |  errCtx...etc...		ex: 	Error: UndefinedObjectのインスタンスは添え字アクセス可能ではありません。--- The full stack ---UndefinedObject(Object)>>error:[] in WorldState>>displayWorldSafely: {[:err :rcvr |  errCtx := thisContext.  [errCtx := errCtx sender.  [errCtx no...]}BlockContext>>valueWithPossibleArgs:[] in BlockContext>>ifError: {[:ex | errorHandlerBlock valueWithPossibleArgs: {ex description. ex receiver}]} - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -BlockContext>>valueWithPossibleArgs:[] in MethodContext(ContextPart)>>handleSignal: {[(self tempAt: 2)   valueWithPossibleArgs: {exception}]}BlockContext>>ensure:MethodContext(ContextPart)>>handleSignal:Error(Exception)>>signalError(Exception)>>signal:UndefinedObject(Object)>>error:UndefinedObject(Object)>>errorNotIndexableUndefinedObject(Object)>>sizeMultiNewParagraph(NewParagraph)>>fastFindFirstLineSuchThat:MultiNewParagraph(NewParagraph)>>lineIndexForPoint:MultiNewParagraph>>displayOn:using:at:FormCanvas>>paragraph:bounds:color:TextMorphForEditView(TextMorph)>>drawOn:FormCanvas(Canvas)>>draw:FormCanvas(Canvas)>>drawMorph:[] in TextMorphForEditView(Morph)>>fullDrawOn: {[(aCanvas isVisible: self bounds)   ifTrue: [aCanvas drawMorph: self].  self...]}FormCanvas>>roundCornersOf:in:during:FormCanvas(Canvas)>>roundCornersOf:during:TextMorphForEditView(Morph)>>fullDrawOn:FormCanvas(Canvas)>>fullDraw:FormCanvas(Canvas)>>fullDrawMorph:[] in TransformMorph>>drawSubmorphsOn: {[:m | myCanvas fullDrawMorph: m]}Array(SequenceableCollection)>>reverseDo:[] in TransformMorph>>drawSubmorphsOn: {[:myCanvas | submorphs   reverseDo: [:m | myCanvas fullDrawMorph: m]]}FormCanvas>>transformBy:clippingTo:during:smoothing:TransformMorph>>drawSubmorphsOn:[] in TransformMorph(Morph)>>fullDrawOn: {[(aCanvas isVisible: self bounds)   ifTrue: [aCanvas drawMorph: self].  self...]}FormCanvas>>roundCornersOf:in:during:FormCanvas(Canvas)>>roundCornersOf:during:TransformMorph(Morph)>>fullDrawOn:FormCanvas(Canvas)>>fullDraw:FormCanvas(Canvas)>>fullDrawMorph:[] in PluggableTextMorph(Morph)>>drawSubmorphsOn: {[:m | canvas fullDrawMorph: m]}Array(SequenceableCollection)>>reverseDo:[] in PluggableTextMorph(Morph)>>drawSubmorphsOn: {[:canvas | submorphs   reverseDo: [:m | canvas fullDrawMorph: m]]}PluggableTextMorph(Morph)>>drawSubmorphsOn:[] in PluggableTextMorph(Morph)>>fullDrawOn: {[(aCanvas isVisible: self bounds)   ifTrue: [aCanvas drawMorph: self].  self...]}FormCanvas>>roundCornersOf:in:during:FormCanvas(Canvas)>>roundCornersOf:during:PluggableTextMorph(Morph)>>fullDrawOn:FormCanvas(Canvas)>>fullDraw:...etc...