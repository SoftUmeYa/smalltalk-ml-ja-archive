	| spaceUsedMax allSuperclassesMax selectorsMax collection basePitch instruments chromaticScale totalDuration makeSoundBlock soundCollection1 soundCollection2 soundCollection3 soundCollection4 offsetSecond droneVolume droneMakeBlock droneL1 droneR1 droneL2 droneR2 droneL3 droneR3 score1 score2 score3 score4 scoreMakeBlock aMixedSound |	spaceUsedMax := 0.	allSuperclassesMax := 0.	selectorsMax := 0.	collection := OrderedCollection new: Metaclass allInstances size.	Cursor execute		showWhile: [SystemNavigation default				allBehaviorsDo: [:aClass | aClass isMeta						ifFalse: [| spaceUsed allSuperclasses selectors | 							spaceUsed := aClass spaceUsed + aClass class spaceUsed.							allSuperclasses := aClass allSuperclasses size.							selectors := aClass selectors size + aClass class selectors size.							spaceUsedMax < spaceUsed								ifTrue: [spaceUsedMax := spaceUsed].							allSuperclassesMax < allSuperclasses								ifTrue: [allSuperclassesMax := allSuperclasses].							selectorsMax < selectors								ifTrue: [selectorsMax := selectors].							collection								add: (Array										with: aClass name										with: spaceUsed										with: allSuperclasses										with: selectors)]]].	basePitch := 'c4'.	instruments := (FMSound class organization listAtCategoryNamed: #instruments)				select: [:each | (each beginsWith: #random) not].	chromaticScale := ((AbstractSound chromaticPitchesFrom: basePitch)				copyFrom: 1				to: 13) reverse.	totalDuration := 0.	makeSoundBlock := [:anArray :instrument | 			| pitch duration loudness | 			pitch := chromaticScale at: (anArray at: 3)							+ 1.			duration := (anArray at: 2)						/ spaceUsedMax * 15 max: 0.15.			totalDuration := totalDuration + duration.			loudness := (anArray at: 4)						/ selectorsMax max: 0.346.			instrument				soundForPitch: pitch				dur: duration				loudness: loudness].	soundCollection1 := OrderedCollection new: collection size.	Cursor execute		showWhile: [collection				do: [:each | 					| instrument | 					instrument := FMSound perform: instruments atRandom.					soundCollection1						add: (makeSoundBlock value: each value: instrument)]].	soundCollection2 := OrderedCollection new: collection size.	Cursor execute		showWhile: [(collection				asSortedCollection: [:a :b | (a at: 2)						> (b at: 2)])				do: [:each | 					| instrument | 					instrument := FMSound perform: instruments atRandom.					soundCollection2						add: (makeSoundBlock value: each value: instrument)]].	soundCollection3 := OrderedCollection new: collection size.	Cursor execute		showWhile: [(collection				asSortedCollection: [:a :b | (a at: 3)						> (b at: 3)])				do: [:each | 					| instrument | 					instrument := FMSound perform: instruments atRandom.					soundCollection3						add: (makeSoundBlock value: each value: instrument)]].	soundCollection4 := OrderedCollection new: collection size.	Cursor execute		showWhile: [(collection				asSortedCollection: [:a :b | (a at: 4)						> (b at: 4)])				do: [:each | 					| instrument | 					instrument := FMSound perform: instruments atRandom.					soundCollection4						add: (makeSoundBlock value: each value: instrument)]].	offsetSecond := 12.	droneVolume := 268.	totalDuration := totalDuration / 4.	droneMakeBlock := [:restDuration :dronePitch :droneDuration :droneLoudness | Array				with: (Array with: #rest with: restDuration)				with: (Array						with: dronePitch						with: droneDuration						with: droneLoudness)].	droneL1 := FMSound				noteSequenceOn: FMSound organ1				from: (droneMakeBlock						value: 0						value: #c3						value: totalDuration + offsetSecond						value: droneVolume).	droneR1 := FMSound				noteSequenceOn: FMSound organ1				from: (droneMakeBlock						value: offsetSecond / 6						value: #'f#3'						value: totalDuration + offsetSecond						value: droneVolume).	droneL2 := FMSound				noteSequenceOn: FMSound organ1				from: (droneMakeBlock						value: offsetSecond / 6 * 2						value: #bf3						value: totalDuration + offsetSecond						value: droneVolume).	droneR2 := FMSound				noteSequenceOn: FMSound organ1				from: (droneMakeBlock						value: offsetSecond / 6 * 3						value: #e4						value: totalDuration + offsetSecond						value: droneVolume).	droneL3 := FMSound				noteSequenceOn: FMSound organ1				from: (droneMakeBlock						value: offsetSecond / 6 * 4						value: #a4						value: totalDuration + offsetSecond						value: droneVolume).	droneR3 := FMSound				noteSequenceOn: FMSound organ1				from: (droneMakeBlock						value: offsetSecond / 6 * 5						value: #d5						value: totalDuration + offsetSecond						value: droneVolume).	{soundCollection1. soundCollection2. soundCollection3. soundCollection4}		do: [:each | each				addFirst: (RestSound dur: offsetSecond)].	score1 := SequentialSound new.	score2 := SequentialSound new.	score3 := SequentialSound new.	score4 := SequentialSound new.	scoreMakeBlock := [:aCollection :score | aCollection				do: [:each | score add: each]].	scoreMakeBlock value: soundCollection1 value: score1.	scoreMakeBlock value: soundCollection2 value: score2.	scoreMakeBlock value: soundCollection3 value: score3.	scoreMakeBlock value: soundCollection4 value: score4.	aMixedSound := MixedSound new.	aMixedSound add: droneL1 pan: 0.1;		 add: droneL2 pan: 0.25;		 add: droneL3 pan: 0.4;		 add: droneR3 pan: 0.6;		 add: droneR2 pan: 0.75;		 add: droneR1 pan: 0.9;		 add: score1 pan: 0.3;		 add: score2 pan: 0.45;		 add: score3 pan: 0.55;		 add: score4 pan: 0.7."	aMixedSound play."	^ {aMixedSound. score1. soundCollection1. collection. spaceUsedMax. allSuperclassesMax. selectorsMax}