'From Squeak3.10beta of 22 July 2007 [latest update: #7143] on 6 September 2007 at 12:25:46 pm'!!Collection methodsFor: 'enumerating' stamp: 'nsh 9/6/2007 01:54'!fold: binaryBlock 	| thisValue nextValue |	thisValue := nextValue := Object new.	self		do: [:each | nextValue := thisValue == nextValue						ifTrue: [each]						ifFalse: [binaryBlock value: nextValue value: each]].	^ nextValue == thisValue		ifTrue: [self error: 'this collection is empty']		ifFalse: [nextValue]! !!Symbol methodsFor: 'converting' stamp: 'nsh 9/5/2007 20:58'!asBlock	| aStream numberOfArguments aCode |	[aStream := String new writeStream.	aStream nextPutAll: '['.	numberOfArguments := self numArgs.	(1 to: numberOfArguments + 1)		do: [:n | aStream nextPutAll: ':a';				 nextPutAll: n printString;				 space].	aStream nextPutAll: '|';		 cr.	aStream nextPutAll: '| arguments |';		 cr.	aStream nextPutAll: 'arguments := Array new: ';		 nextPutAll: numberOfArguments printString;		 nextPutAll: '.';		 cr.	(2 to: numberOfArguments + 1)		do: [:n | aStream nextPutAll: 'arguments at: ';				 nextPutAll: (n - 1) printString;				 nextPutAll: ' put: a';				 nextPutAll: n printString;				 nextPutAll: '.';				 cr].	aStream nextPutAll: 'a1 perform: ';		 nextPutAll: self printString;		 nextPutAll: ' withArguments: arguments'.	aStream nextPutAll: ']'.	aCode := aStream contents]		ensure: [aStream close].	^ Compiler		evaluate: aCode		for: nil		logged: false! !!Symbol methodsFor: 'converting' stamp: 'nsh 9/5/2007 20:58'!asBlockFor: aReceiver 	| aStream numberOfArguments aCode |	[aStream := String new writeStream.	aStream nextPutAll: '['.	numberOfArguments := self numArgs.	(1 to: numberOfArguments)		do: [:n | aStream nextPutAll: ':a';				 nextPutAll: n printString;				 space].	aStream nextPutAll: '|';		 cr.	aStream nextPutAll: '| arguments |';		 cr.	aStream nextPutAll: 'arguments := Array new: ';		 nextPutAll: numberOfArguments printString;		 nextPutAll: '.';		 cr.	(1 to: numberOfArguments)		do: [:n | aStream nextPutAll: 'arguments at: ';				 nextPutAll: n printString;				 nextPutAll: ' put: a';				 nextPutAll: n printString;				 nextPutAll: '.';				 cr].	aStream nextPutAll: 'self perform: ';		 nextPutAll: self printString;		 nextPutAll: ' withArguments: arguments'.	aStream nextPutAll: ']'.	aCode := aStream contents]		ensure: [aStream close].	^ Compiler		evaluate: aCode		for: aReceiver		logged: false! !